const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const VueLoaderPlugin = require('vue-loader/lib/plugin');
const copyPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const TerserJSPlugin = require('terser-webpack-plugin');
const webpack = require('webpack');
const packageInfo = require("./package.json");
const isDev = process.env.NODE_ENV === 'development';
console.log("webpack build runing for environment", process.env.NODE_ENV);
const outputFolder = isDev ? "build" : "dist";
const { WebpackManifestPlugin } = require('webpack-manifest-plugin');
module.exports = {
    devServer: {
        headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Credentials": "true",
            "Access-Control-Allow-Headers": "Content-Type, Authorization, x-id, Content-Length, X-Requested-With",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS"
        },
        historyApiFallback: true
    },
    entry: ["./src/index.ts"],
    // devtool: 'source-map',
    // output: {
    //     path: path.join(__dirname, `${outputFolder}`),
    //     publicPath: isDev ? '/' : '',
    //     filename: isDev ? "scripts/[name].bundle.js" : "scripts/[name].[contenthash:8].js"
    // },
    // mode: isDev ? 'development' : 'production',
    output: {
        jsonpFunction: 'wpJsonpMaticWidget',
        path: path.join(__dirname, "./dist"),
        filename: "matic_widget_element.bundle.js", //"[name].bundle.js"
        // library: 'MaticWidgetElement',
        // libraryExport: 'default',
        // libraryTarget: target.type
    },
    mode: process.env.NODE_ENV,
    devtool: 'source-map',
    module: {
        rules: [{
            test: /\.ts$/,
            //exclude: /node_modules/,
            use: {
                loader: 'ts-loader',
                options: {
                    appendTsSuffixTo: [/\.vue$/],
                }
            }
        },
        {
            test: /\.(png|svg|jpg|gif)$/,
            use: [
                // {
                //     loader: 'file-loader',
                //     options: {
                //         outputPath: 'client/images',
                //     },
                // }
                {
                    loader: 'url-loader',
                    options: {
                        limit: Infinity,
                    },
                },
            ]
        },
        {
            test: /\.vue$/,
            loader: 'vue-loader',
            options: {
                shadowMode: true
            }
        },

        {
            test: /\.css$/,
            oneOf: [
                // this applies to <style module>
                {
                    resourceQuery: /module/,
                    use: [
                        {
                            loader: 'vue-style-loader',
                            options: {
                                shadowMode: true
                            }
                        },
                        {
                            loader: 'css-loader',
                            options: {
                                modules: true,
                                localIdentName: '[local]_[hash:base64:8]'
                            }
                        }
                    ]
                },
                // this applies to <style> or <style scoped>
                {
                    use: [
                        {
                            loader: 'vue-style-loader',
                            options: {
                                shadowMode: true
                            }
                        },
                        'css-loader'
                    ]
                }
            ]
            // use: [
            //     isDev ? 'vue-style-loader' : MiniCssExtractPlugin.loader,
            //     { loader: 'css-loader' },
            // ]
        },
        {
            test: /\.styl$/,
            use: [
                {
                    loader: "style-loader" // creates style nodes from JS strings
                },
                {
                    loader: "css-loader" // translates CSS into CommonJS
                },
                {
                    loader: "stylus-loader" // compiles Stylus to CSS
                }
            ]
        },
        {
            test: /\.scss$/,
            use: [
                {
                    loader: 'vue-style-loader',
                    options: {
                        shadowMode: true
                    }
                },
                'css-loader',
                {
                    loader: 'sass-loader',
                    // global data for all components
                    // this can be read from a scss file
                }
            ]
        },
        {
            test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/,
            use: 'file-loader?name=fonts/[name][hash].[ext]]&mimetype=application/octet-stream'
        },
        {
            test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/,
            use: 'file-loader?name=fonts/[name][hash].[ext]&mimetype=application/octet-stream'
        },
        {
            test: /\.eot(\?v=\d+\.\d+\.\d+)?$/,
            use: 'file-loader'
        }
        ]
    },
    resolve: {
        alias: {
            "~": path.join(__dirname),
            "@": path.join(__dirname, 'src'),
            "@config": path.join(__dirname, 'config'),
            "@components": path.join(__dirname, 'src', 'components')
        },
        extensions: ['.js', '.ts', '.vue', '.json']
    },
    plugins: [
        new WebpackManifestPlugin(),
        new webpack.HashedModuleIdsPlugin(),
        new VueLoaderPlugin(),
        new HtmlWebpackPlugin({
            // cache: true,
            // hash: true,
            template: './src/index.html',
            minify: {
                collapseWhitespace: !isDev,
                removeComments: !isDev,
                removeRedundantAttributes: !isDev,
                removeScriptTypeAttributes: !isDev,
                removeStyleLinkTypeAttributes: !isDev
            }
        }),
        // new copyPlugin({
        //     patterns: [{ from: path.resolve('build_helper', 'npm.export.js'), to: '' }],
        // }),
        new MiniCssExtractPlugin({
            filename: 'styles/style.[contenthash].css',
            // chunkFilename: '[id].css',
        }),
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
            'process.env.appVersion': JSON.stringify(packageInfo.version),
            // 'process.env.BUILD_ENV': JSON.stringify(process.env.BUILD_ENV),
        }),
    ],
    optimization: {
        // runtimeChunk: 'single',
        splitChunks: {
            chunks: 'all',
            maxInitialRequests: Infinity,
            minSize: 100000,
            maxSize: 300000,
            cacheGroups: {
                vendor: {
                    test: /[\\/]node_modules[\\/]/,
                    name(module) {
                        // get the name. E.g. node_modules/packageName/not/this/part.js
                        // or node_modules/packageName
                        const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];
                        // console.log('package', packageName);
                        // npm package names are URL-safe, but some servers don't like @ symbols
                        return `npm.${packageName.replace('@', '')}`;
                    },
                },
            },
        },
        minimizer: [new TerserJSPlugin(), new OptimizeCSSAssetsPlugin({
            cssProcessorPluginOptions: {
                preset: ['default', { discardComments: { removeAll: true } }],
            },
        })],
    }
};
