const { S3 } = require('aws-sdk');
const { readdir, statSync, createReadStream } = require('fs-extra')
const path = require('path');
const package = require('./package.json');
const dotenv = require('dotenv');
const mime = require("mime-types");

dotenv.config({
    // path:"../"
});

const getMimeTypeFromExtension = (ext) => {
    return mime.lookup(ext);
}
const appConfig = {
    get spaceAcessKeyId() {
        return process.env.ACCESS_KEY_ID;
    },
    get spaceSecretAcessKey() {
        return process.env.SECRET_ACCESS_KEY;
    }
};
console.log('config', appConfig);
const s3 = new S3({
    accessKeyId: appConfig.spaceAcessKeyId,
    secretAccessKey: appConfig.spaceSecretAcessKey
});
const bucketName = "matic-wallet-assets";
const queue = [
    {
        folder: "static/",
        relative: '',
        key: ''
    },
    {
        folder: "dist/",
        relative: '',
        key: 'widget/'
    }
];
function Uploader(folderName, relativeLocation, key) {
    this.upload = function () {
        return readdir(folderName).then(function (files) {
            console.log("files", files);
            files = files.filter(item => {
                if (item.match(/.DS_Store/i)) {
                    return false;
                }
                return true;
            })
            return Promise.all(files.map(function (file) {
                return new Promise(function (onFileUploaded, onError) {
                    // console.log(file);
                    if (statSync(path.join(__dirname, folderName, file)).isDirectory()) {
                        const folderLocation = folderName + "/" + file;
                        const splittedLocation = relativeLocation.split("/");
                        // if (splittedLocation.length > 1) {
                        //     relativeLocation = relativeLocation.substr(relativeLocation.indexOf("/") + 1);
                        //     relativeLocation = path.join(relativeLocation[2], file);
                        // }
                        // else {
                        const relative = path.join(relativeLocation, file);
                        // }

                        // console.log(folderLocation);
                        // new Uploader(folderLocation, relativeLocation).upload();
                        // readdir(folderLocation);
                        queue.push({
                            folder: folderLocation,
                            relative: relative
                        })
                        onFileUploaded();
                    }
                    else if (!file.match(/.ts/i)) {
                        const fileRelativeLocation = path.join(relativeLocation, file);
                        console.log('relative', fileRelativeLocation);
                        const rs = createReadStream(path.join(folderName, file));
                        const extension = path.extname(fileRelativeLocation);
                        const contentEncoding = (function getContentEncoding() {
                            if (/\.css/.test(file) || /\.js/.test(file)) {
                                // console.log("encoding", 'br');
                                return 'gzip'
                            }
                        })();
                        //`${package.version}`
                        console.log("fileRelativeLocation", fileRelativeLocation);
                        const result = s3.upload({
                            Body: rs,
                            Bucket: bucketName,
                            // Key: "images/" + fileName,
                            Key: key + fileRelativeLocation,
                            ACL: 'public-read',
                            // Here we set the Content-Encoding header for all the gzipped files to 'gzip'
                            // ContentEncoding: contentEncoding,
                            ContentType: getMimeTypeFromExtension(extension)
                        }).promise().then(onFileUploaded).catch(onError);
                        // onFileUploaded();

                        
                    }

                });

            }));
        });
    }
}

function upload() {
    if (queue.length > 0) {
        Promise.all(queue.map(function (item) {
            return new Uploader(item.folder, item.relative, item.key).upload();
        })).then(function () {
            queue.shift();
            console.log('files', queue)
            upload();

        });
    }
    else {
        console.log('all items uploaded');
    }
}

upload();
